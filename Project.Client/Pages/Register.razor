@page "/Register"
@inject HttpClient Http
@inject ISnackbar Snackbar

<PageTitle>Register to our service</PageTitle>

<MudContainer>
    <MudTextField @bind-Value="_request.Name" T="string" InputType="InputType.Text" Label="User name" Class="m-2"></MudTextField>
    <MudTextField @bind-Value="_request.Email" T="string" InputType="InputType.Email" Label="E-mail" Class="m-2"></MudTextField>
    <MudTextField @bind-Value="_request.Password" T="string" InputType="InputType.Password"
                  Label="Password" Class="m-2"></MudTextField>
    <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="RegisterClicked" Class="m-2">Register</MudButton>
    <br/>
    <MudLink Href="/Login" Color="Color.Primary" Underline="Underline.Hover" Class="m-2">Already have account? Login then</MudLink>
    @if (_showLinks)
    {
        <div>
            <MudLink Href="/Login" Color="Color.Secondary" Underline="Underline.Hover" Class="m-2">Login page</MudLink>
        </div>
        <div>
            <MudLink Href="/" Color="Color.Secondary" Underline="Underline.Hover" Class="m-2">Home page</MudLink>
        </div>
    }
</MudContainer>

@code {
    private bool _showLinks;
    private readonly RegisterRequest _request = new();

    private async Task RegisterClicked()
    {
        var response = await Http.PostAsJsonAsync($"{Utils.API_URL}/user/register", _request);
        var content = await response.Content.ReadFromJsonAsync<BaseResponse>();

        if (!content!.IsSuccessful)
        {
            Snackbar.Add(content.Message, Severity.Error);
            return;
        }

        _showLinks = true;
    }

}