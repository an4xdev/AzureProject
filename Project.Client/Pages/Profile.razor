@page "/Profile"

<CheckLogged/>

@inject HttpClient Http
@inject ICurrentUser CurrentUser

<PageTitle>Your profile</PageTitle>

@switch (_posts)
{
    case null when _loading:
        <MudText>Loading...</MudText>
        break;
    case null when !_loading:
        <div class="text-center">
            <MudText Typo="Typo.h6">You dont have any posts. Maybe add someone?</MudText>
            <MudLink Href="/Form" Color="Color.Secondary" Underline="Underline.Hover" Class="m-2"><MudIconButton Icon="@Icons.Material.Filled.Add"/></MudLink>
        </div>
        break;
    default:
    {
        if (_posts != null)
        {
            foreach (var post in _posts)
            {
                <SimplePostComponent PostDto="post" OnDelete="HandleDelete"/>
            }
        }
        else
        {
            <MudText>Something went wrong please contact administrator.</MudText>
        }
        break;
    }
}

@code {
    private List<SimplePostDto>? _posts;
    private bool _loading = true;

    protected override async Task OnInitializedAsync()
    {
        _posts = await Http.GetFromJsonAsync<List<SimplePostDto>>($"{Utils.API_URL}/post/{CurrentUser.UserId}");
        _loading = false;
    }

    private async Task HandleDelete(Guid postId)
    {
        var itemToRemove = _posts?.FirstOrDefault(p => p.Id == postId);
        if (itemToRemove != null)
        {
            _posts?.Remove(itemToRemove);
            await InvokeAsync(StateHasChanged);
        }
    }

}