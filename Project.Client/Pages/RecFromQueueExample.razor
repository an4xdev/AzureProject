@using Azure.Messaging.ServiceBus
@using Project.Shared.DoNotGit
@inject HttpClient Http

<PageTitle>Home</PageTitle>

<h3>Service Bus Processor</h3>
<button @onclick="StartProcessing">Start Processing</button>
<button @onclick="SetSub">Change sub</button>

@if (isOne)
{
    <p>sub1</p>
}
else
{
    <p>sub2</p>
}


@if (receivedMessages.Any())
{
    <p>Count: @receivedMessages.Count()</p>
    <h4>Received Messages:</h4>
    <ul>
        @foreach (var message in receivedMessages)
        {
        <li>@message</li>
        }
    </ul>
}

@code{

    public void SetSub()
    {
        isOne = !isOne;
    }

    public bool isOne { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // await Http.PostAsync($"{Utils.API_URL}/weatherforecast/topic", null);
    }

    private List<string> receivedMessages = new List<string>();

    private ServiceBusClient _client;
    private ServiceBusProcessor _processor;

    private async Task StartProcessing()
    {

        var clientOptions = new ServiceBusClientOptions()
        {
            TransportType = ServiceBusTransportType.AmqpWebSockets
        };
        _client = new ServiceBusClient(DontCommit.TopicKey, clientOptions);
        _processor = _client.CreateProcessor("testtopic", isOne? "sub1": "sub2", new ServiceBusProcessorOptions());
        _processor.ProcessMessageAsync += ProcessMessages;
        _processor.ProcessErrorAsync += ErrorHandler;
        await _processor.StartProcessingAsync();
    }

    private async Task ProcessMessages(ProcessMessageEventArgs args)
    {
        // Your message handling logic
        var body = args.Message.Body.ToString();
        Console.WriteLine($"Received message: {body}");

        // Update the UI with the received message
        await InvokeAsync(() =>
        {
            receivedMessages.Add(body);
            StateHasChanged();
        });


        // Complete the message
        await args.CompleteMessageAsync(args.Message);
    }

    private Task ErrorHandler(ProcessErrorEventArgs args)
    {
        // Your error handling logic
        Console.WriteLine($"Error source: {args.Exception.Source}, Exception: {args.Exception.Message}");

        // Log the error or take appropriate action

        return Task.CompletedTask;
    }

}

