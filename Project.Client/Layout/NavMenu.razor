@inject EventAggregator EventAggregator
@inject ILocalStorageService LocalStorage

<MudButton ButtonType="ButtonType.Button" Href="/" Variant="Variant.Filled" Color="Color.Secondary">Home</MudButton>
<MudSpacer />
<div class="align-items-center d-flex">
    <div class="ms-4 me-4">
        <ChangeThemeComponent/>
    </div>
    @if (IsLogged)
    {
        <LoggedMenuComponent/>
    }
    else
    {
        <AnnonymousMenuComponent/>
    }
</div>


@code{

    private CurrentUser _currentUser;

    private bool IsLogged { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IsLogged = await LocalStorage.ContainKeyAsync("user");
        if (IsLogged)
        {
            _currentUser = await LocalStorage.GetItemAsync<CurrentUser>("user");
        }
        EventAggregator.Subscribe("logged", UserLogged);
        EventAggregator.Subscribe("loggedOFF", UserLoggedOff);
    }

    private Task UserLogged()
    {
        IsLogged = true;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task UserLoggedOff()
    {
        IsLogged = false;
        StateHasChanged();
        return Task.CompletedTask;
    }

}