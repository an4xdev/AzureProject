@inject EventAggregator EventAggregator
@inject ILocalStorageService LocalStorage
@inject ICurrentUser CurrentUser

<MudButton ButtonType="ButtonType.Button" Href="/" Variant="Variant.Filled" Color="Color.Secondary">Home</MudButton>
<MudSpacer />
<div class="align-items-center d-flex">
    @if (IsLogged)
    {
        <LoggedMenuComponent/>
    }
    else
    {
        <AnnonymousMenuComponent/>
    }
</div>


@code{

    private bool IsLogged { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IsLogged = await LocalStorage.ContainKeyAsync("user");
        if (IsLogged)
        {
            CurrentUser = await LocalStorage.GetItemAsync<CurrentUser>("user");
        }
        EventAggregator.Subscribe("logged", UserLogged);
        EventAggregator.Subscribe("loggedOFF", UserLoggedOff);
    }

    private async Task UserLogged()
    {
        IsLogged = true;
        await InvokeAsync(StateHasChanged);
    }

    private async Task UserLoggedOff()
    {
        IsLogged = false;
        await InvokeAsync(StateHasChanged);
    }

}