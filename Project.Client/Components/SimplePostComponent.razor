@inject HttpClient Http
@inject ILocalStorageService LocalStorage
@inject ISnackbar SnackBar
@inject NavigationManager NavigationManager
<MudCard>
    @* photo uploaded to azure storage, got from: https://picsum.photos/ *@
    @* <MudCardMedia Image="https://anax.blob.core.windows.net/test/24d738d3-3da9-4e7d-a992-0d5dbb916415.png" *@
    @*               Height="250"/> *@
    <MudCardMedia Image="@PostDto.PhotoData" Height="250"/>
    <MudCardContent>
        @if (PostDto.Description != null)
        {
            @* <MudText Typo="Typo.body2">This photo was taken in a small village in Istra Croatia.</MudText> *@
            <MudText Typo="Typo.body2">@PostDto.Description</MudText>
        }
        else
        {
            <MudText Typo="Typo.body2" Color="Color.Error">This post doesn't have a description</MudText>
        }
        @* <MudText Typo="Typo.body2">This photo was taken in a small village in Istra Croatia.</MudText> *@
    </MudCardContent>
    <MudCardActions>
        <MudContainer Class="justify-content-around">
            <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Info" OnClick="HandleEdit"/>
            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="DeletePost"/>
        </MudContainer>
    </MudCardActions>
</MudCard>

@code {
    [Parameter]
    public SimplePostDto PostDto { get; set; }
    [Parameter]
    public EventCallback<Guid> OnDelete { get; set; }

    private CurrentUser _currentUser;

    protected override async Task OnInitializedAsync()
    {
        _currentUser = await LocalStorage.GetItemAsync<CurrentUser>("user");
    }

    private async Task DeletePost()
    {
        var request = new DeletePostRequest
        {
            PostId = PostDto.Id,
            UserId = _currentUser.UserId
        };

        var response = await Http.PutAsJsonAsync("/post/delete", request);

        var content = await response.Content.ReadFromJsonAsync<BaseResponse>();

        if (!content!.IsSuccessful)
        {
            SnackBar.Add(content.Message, Severity.Error);
            return;
        }

        SnackBar.Add("Successfully deleted post", Severity.Success);

        await OnDelete.InvokeAsync(PostDto.Id);
    }

    private async Task HandleEdit()
    {
        PassPostToEdit pass = new()
        {
            Id = PostDto.Id,
            PhotoName = PostDto.PhotoData.Split("/").ToList().LastOrDefault() ?? string.Empty,
            Description = PostDto.Description
        };

        if (await LocalStorage.ContainKeyAsync("pass"))
        {
            await LocalStorage.RemoveItemAsync("pass");
        }

        await LocalStorage.SetItemAsync("pass", pass);

        NavigationManager.NavigateTo($"/Form/{PostDto.Id}");
    }
}