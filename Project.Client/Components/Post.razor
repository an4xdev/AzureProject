@inject IDialogService DialogService
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage

@if (!_loading)
{
    @* based on: https://www.mudblazor.com/components/card#combined *@
    <MudCard>
        <MudCardHeader>
            <CardHeaderAvatar>
                @* <MudAvatar Color="Color.Secondary">I</MudAvatar> *@
                <MudAvatar Color="Color.Secondary">@PostDto.Creator.UserName[0]</MudAvatar>
            </CardHeaderAvatar>
            <CardHeaderContent>
                @* <MudText Typo="Typo.body1">User name</MudText> *@
                <MudText Typo="Typo.body1">@PostDto.Creator.UserName</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        @* photo uploaded to azure storage, got from: https://picsum.photos/ *@
        @* <MudCardMedia Image="https://anax.blob.core.windows.net/test/24d738d3-3da9-4e7d-a992-0d5dbb916415.png" Height="250"/> *@
        <MudCardMedia Image="@PostDto.PhotoData" Height="250"/>
        <MudCardContent>
            @if (PostDto.Description != null)
            {
                @* <MudText Typo="Typo.body2">This photo was taken in a small village in Istra Croatia.</MudText> *@
                <MudText Typo="Typo.body2">@PostDto.Description</MudText>
            }
            else
            {
                <MudText Typo="Typo.body2" Color="Color.Error">This post doesn't have a description</MudText>
            }
        </MudCardContent>
        <MudCardActions>
            <MudContainer Class="text-center">
                <MudText Class="fw-bold">Likes:</MudText>
                <MudText>@PostDto.Likes</MudText>
                <MudIconButton Icon="@Icons.Material.Filled.AddComment" Color="Color.Default"
                               OnClick="CheckLoginBeforeComment"/>
            </MudContainer>
        </MudCardActions>
        <MudCardActions>
            <MudContainer Class="justify-content-around">
                @foreach (var emote in PostDto.Emotes)
                {
                    <MudBadge Content="@emote.Count" Overlap="true" Class="mx-6 my-4">
                        <MudButton Style="@(ActiveEmote(emote.UserIds) ? _addedEmote : _notAddedEmote)"
                                   OnClick="() => CheckLoginBeforeToggleEmote(emote.Id)">@emote.Value</MudButton>
                    </MudBadge>
                }
                @* <MudBadge Content="3" Overlap="true" Class="mx-6 my-4"> *@
                @*     <MudButton>❤️</MudButton> *@
                @* </MudBadge> *@
                @* <MudBadge Content="3" Overlap="true" Class="mx-6 my-4"> *@
                @*     <MudButton>😊</MudButton> *@
                @* </MudBadge> *@
                @* <MudBadge Content="3" Overlap="true" Class="mx-6 my-4"> *@
                @*     <MudButton>🤣</MudButton> *@
                @* </MudBadge> *@
                @* <MudBadge Content="3" Overlap="true" Class="mx-6 my-4"> *@
                @*     <MudButton>😍</MudButton> *@
                @* </MudBadge> *@
                @* <MudBadge Content="3" Overlap="true" Class="mx-6 my-4"> *@
                @*     <MudButton>👍</MudButton> *@
                @* </MudBadge> *@
            </MudContainer>
        </MudCardActions>
        @if (ShowMore)
        {
            <MudContainer Class="text-center">
                <MudIconButton Icon="@Icons.Material.Filled.MoreHoriz" Color="Color.Default"
                               OnClick="ShowPostWithComments"/>
            </MudContainer>
        }
    </MudCard>
}

@code {
    [Parameter] public PostDto PostDto { get; set; }
    [Parameter] public bool ShowMore { get; set; }

    private readonly string _addedEmote = "border:2px solid green;";
    private readonly string _notAddedEmote = "border:2px solid black;";

    private readonly DialogOptions _postDialogOptions = new() { CloseButton = true, NoHeader = true, MaxWidth = MaxWidth.Large, Position = DialogPosition.Center, CloseOnEscapeKey = true };

    private readonly DialogOptions _commentDialogOptions = new() { CloseButton = true, MaxWidth = MaxWidth.Large, Position = DialogPosition.Center, CloseOnEscapeKey = true };

    private CurrentUser _currentUser;

    private bool _loading = true;

    protected override async Task OnInitializedAsync()
    {
        if (await LocalStorage.ContainKeyAsync("user"))
        {
            _currentUser = await LocalStorage.GetItemAsync<CurrentUser>("user");
        }

        _loading = false;
    }


    private async Task ShowPostWithComments()
    {
        var parameters = new DialogParameters<PostDialog>
        {
            { x => x.PostDto, PostDto },
            { x => x.ShowMore, false },
        };

        await DialogService.ShowAsync<PostDialog>("", parameters, _postDialogOptions);
    }

    private bool ActiveEmote(List<Guid> userIds)
    {
        var isActive = _currentUser?.UserId != null && userIds.Contains(_currentUser.UserId);
        return isActive;
    }

    private async Task CheckLoginBeforeComment()
    {
        Console.WriteLine(_currentUser);
        if (_currentUser.UserId == Guid.Empty)
        {
            var loginParameters = new DialogParameters<MustLoginDialog>()
            {
                { x => x.Action, "comment the post." }
            };

            var loginDialog = await DialogService.ShowAsync<MustLoginDialog>("", loginParameters);

            var loginResult = await loginDialog.Result;

            if (loginResult?.Data is not bool value) return;
            if (value)
            {
                NavigationManager.NavigateTo("/Login");
            }

            return;
        }

        await ShowCommentDialog();
    }

    private async Task ShowCommentDialog()
    {
        var parameters = new DialogParameters<AddCommentDialog>
        {
            { x => x.PostId, PostDto.Id }
        };

        var dialog = await DialogService.ShowAsync<AddCommentDialog>("Add new comment", parameters, _commentDialogOptions);

        var result = await dialog.Result;

        if (result!.Canceled)
        {
            return;
        }

        if (result.Data is CommentDto commentDto)
        {
            PostDto.Comments.Add(commentDto);
            StateHasChanged();
        }
        else
        {
            Snackbar.Add("Internal error with adding new comment. Contact administrator.", Severity.Error);
        }
    }

    private async Task CheckLoginBeforeToggleEmote(Guid emoteId)
    {
        Console.WriteLine(_currentUser);
        if (_currentUser.UserId == Guid.Empty)
        {
            var loginParameters = new DialogParameters<MustLoginDialog>
            {
                { x => x.Action, "change emote to the post." }
            };

            var loginDialog = await DialogService.ShowAsync<MustLoginDialog>("", loginParameters);

            var loginResult = await loginDialog.Result;

            if (loginResult?.Data is not bool value) return;
            if (value)
            {
                NavigationManager.NavigateTo("/Login");
            }

            return;
        }

        await ToggleEmote(emoteId);
    }

    private async Task ToggleEmote(Guid emoteId)
    {
        var emote = PostDto.Emotes.FirstOrDefault(e => e.Id == emoteId);

        if (emote == null)
        {
            Snackbar.Add("Unknown emote.", Severity.Error);
            return;
        }

        var request = new ToggleEmoteToPostRequest
        {
            EmoteId = emoteId,
            PostId = PostDto.Id,
            UserId = _currentUser.UserId
        };

        var path = $"/emote/";

        var contains = emote.UserIds.Contains(_currentUser.UserId);

        path += contains ? "remove" : "add";

        var response = await Http.PostAsJsonAsync(path, request);

        var content = await response.Content.ReadFromJsonAsync<BaseResponse>();

        if (!content!.IsSuccessful)
        {
            Snackbar.Add(content.Message, Severity.Error);
            return;
        }

        emote.UserIds = contains ?
            emote.UserIds.Where(id => id != _currentUser.UserId).ToList() :
            emote.UserIds.Append(_currentUser.UserId).ToList();

        emote.UserIds = [..emote.UserIds];
        emote.Count = emote.UserIds.Count;

        StateHasChanged();
        Console.WriteLine("StateHasChanged");
    }

}