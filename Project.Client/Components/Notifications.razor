@inject EventAggregator EventAggregator
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject ILocalStorageService LocalStorage
@inject TopicService TopicService

<MudBadge Content="@_receivedMessages.Count" Overlap="true" Class="mx-6 my-4">
    <MudIconButton Icon="@(AreNotifications ? Icons.Material.Filled.NotificationsActive : Icons.Material.Filled.Notifications)" Disabled="@(!AreNotifications)" OnClick="ShowDialog"/>
</MudBadge>


@code {

    private CurrentUser _currentUser = new();

    private bool AreNotifications { get; set; }

    private List<string> _receivedMessages = [];

    private ServiceBusClient _client = null!;
    private ServiceBusProcessor _processor = null!;

    private readonly DialogOptions _dialogOptions = new() { CloseButton = true, NoHeader = true, MaxWidth = MaxWidth.Medium, Position = DialogPosition.TopRight, CloseOnEscapeKey = true };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Console.WriteLine("OnAfterRender");
            EventAggregator.Subscribe("logged", StartProcessing);
            // TODO: remove event and give callback to dialog
            EventAggregator.Subscribe("NotifCleared", Clear);
            Console.WriteLine("Subscribed to events");
            await StartProcessing();
        }
    }


    private async Task ShowDialog()
    {
        var parameters = new DialogParameters<NotificationDialog>
        {
            { x => x.Notifications, _receivedMessages },
        };

        await DialogService.ShowAsync<NotificationDialog>("", parameters, _dialogOptions);
    }

    private async Task Clear()
    {
        _receivedMessages.Clear();
        AreNotifications = false;
        StateHasChanged();
    }

    private async Task StartProcessing()
    {
        Console.WriteLine("Stated Processing");

        if (!await LocalStorage.ContainKeyAsync("user"))
        {
            Console.WriteLine("user isn't in local storage");
            return;
        }

        _currentUser = await LocalStorage.GetItemAsync<CurrentUser>("user");

        if (_currentUser == null)
        {
            Console.WriteLine("user is null");
            return;
        }

        if (_client != null)
        {
            Console.WriteLine("ServiceBusClient is already initialized");
            return;
        }

        var clientOptions = new ServiceBusClientOptions
        {
            TransportType = ServiceBusTransportType.AmqpWebSockets
        };
        _client = new ServiceBusClient(TopicService.TopicKey, clientOptions);
        _processor = _client.CreateProcessor(TopicService.TopicName, _currentUser.Email.Replace("@", "__"), new ServiceBusProcessorOptions());
        _processor.ProcessMessageAsync += ProcessMessages;
        _processor.ProcessErrorAsync += ErrorHandler;

        Console.WriteLine($"STARTED listening to: {_currentUser.Email.Replace("@", "__")}");

        await _processor.StartProcessingAsync();
    }

    private async Task ProcessMessages(ProcessMessageEventArgs args)
    {
        var body = args.Message.Body.ToString();

        Console.WriteLine($"Got: {body}");

        if (_currentUser != null && body.Contains(_currentUser.Email))
        {
            await args.CompleteMessageAsync(args.Message);
            return;
        }

        await args.CompleteMessageAsync(args.Message);

        if (!_receivedMessages.Contains(body))
        {
            _receivedMessages.Add(body);
        }

        AreNotifications = _receivedMessages.Count > 0;
        StateHasChanged();
    }

    private Task ErrorHandler(ProcessErrorEventArgs args)
    {
        Console.WriteLine($"Error source: {args.Exception.Source}, Exception: {args.Exception.Message}");

        Snackbar.Add("Some error occured in notification receive task.", Severity.Error);

        return Task.CompletedTask;
    }

}